name: Backend CI/CD Pipeline

on:
  push:
    paths:
      - 'backend/**'
    branches:
      - main
  pull_request:
    paths:
      - 'backend/**'
    branches:
      - main

jobs:
  ci:
    name: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Grant execute permission for Gradle
        run: chmod +x backend/gradlew

      - name: Prepare application.properties
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION: ${{ secrets.JWT_EXPIRATION }}
          SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          CHATPGT_API_URL: ${{ secrets.CHATPGT_API_URL }}
          CHATPGT_API_KEY: ${{ secrets.CHATPGT_API_KEY }}
        run: |
          envsubst < backend/src/main/resources/application.properties.template > backend/src/main/resources/application.properties
        

      - name: Build & Test with Gradle
        run: cd backend && ./gradlew clean build test

      - name: List build/libs directory
        working-directory: ./backend
        run: ls -l build/libs/

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker Image
        run: docker build -t blancjh/gymtinued-backend:latest backend/

      - name: Push Docker Image to Docker Hub
        run: docker push blancjh/gymtinued-backend:latest

  cd:
    name: Continuous Deployment
    runs-on: ubuntu-latest
    needs: ci
    steps:
        - name: Checkout repository
          uses: actions/checkout@v3
  
        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v2
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }}
  
        - name: Prepare Task Definition
          env:
            JWT_SECRET: ${{ secrets.JWT_SECRET }}
            SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
            SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
            CHATGPT_API_URL: ${{ secrets.CHATGPT_API_URL }}
            CHATGPT_API_key: ${{ secrets.CHATGPT_API_key }}
            SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
            JWT_EXPIRATION: ${{ secrets.JWT_EXPIRATION }}
          run: |
            envsubst < backend/ecs-task-definition.json > backend/ecs-task-definition-filled.json
  
        - name: Validate Filled Task Definition File
          run: |
            cat backend/ecs-task-definition-filled.json
            jq . backend/ecs-task-definition-filled.json
  
        - name: Register Task Definition
          id: register_task
          run: |
            NEW_TASK_DEF=$(aws ecs register-task-definition --cli-input-json file://backend/ecs-task-definition-filled.json | jq -r '.taskDefinition.taskDefinitionArn')
            echo "Registered new task definition: $NEW_TASK_DEF"
            echo "taskDefArn=$NEW_TASK_DEF" >> $GITHUB_OUTPUT
  
        - name: Update ECS Service to Deploy New Task Definition
          run: |
            aws ecs update-service \
              --cluster "${{ secrets.ECS_CLUSTER_NAME }}" \
              --service "${{ secrets.ECS_SERVICE_NAME }}" \
              --task-definition "${{ steps.register_task.outputs.taskDefArn }}" \
              --force-new-deployment
  
