name: Deploy ECS Fargate Task

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
  pull_request:
    branches:
      - main
    paths:
      - 'backend/**'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Prepare Task Definition
        run: |
          envsubst < ecs-task-definition.json > ecs-task-definition-filled.json

      - name: Validate Task Definition File
        run: |
          cat ecs-task-definition.json
          jq . ecs-task-definition.json

      - name: Register Task Definition and Run Task
        run: |
          # Register the new task definition and capture its ARN.
          NEW_TASK_DEF=$(aws ecs register-task-definition --cli-input-json file://ecs-task-definition-filled.json | jq -r '.taskDefinition.taskDefinitionArn')
          echo "Registered new task definition: $NEW_TASK_DEF"

          # Run a new task using the registered task definition.
          aws ecs run-task \
            --cluster "${{ secrets.ECS_CLUSTER_NAME }}" \
            --launch-type FARGATE \
            --task-definition "$NEW_TASK_DEF" \
            --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.ECS_SUBNET_ID }}],securityGroups=[${{ secrets.ECS_SECURITY_GROUP }}],assignPublicIp=ENABLED}"

      - name: Update ECS Service to Deploy New Task Definition
        run: |
          # Update the ECS service to force a new deployment.
          aws ecs update-service \
            --cluster "${{ secrets.ECS_CLUSTER_NAME }}" \
            --service "${{ secrets.ECS_SERVICE_NAME }}" \
            --task-definition "${{ steps.register_task.outputs.taskDefArn }}" \
            --force-new-deployment